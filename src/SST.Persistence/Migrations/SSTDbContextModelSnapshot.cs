// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SST.Persistence;

namespace SST.Persistence.Migrations
{
    [DbContext(typeof(SSTDbContext))]
    partial class SSTDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SST.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentSubjectRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentSubjectRef");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SST.Domain.Entities.Lector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademicStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserRef")
                        .IsUnique()
                        .HasFilter("[UserRef] IS NOT NULL");

                    b.ToTable("Lectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicStatus = "Доцент",
                            FirstName = "Анатолій",
                            LastName = "Музичук"
                        },
                        new
                        {
                            Id = 2,
                            AcademicStatus = "Асистент",
                            FirstName = "Андрій",
                            LastName = "Глова"
                        },
                        new
                        {
                            Id = 3,
                            AcademicStatus = "Професор",
                            FirstName = "Юрій",
                            LastName = "Щербина"
                        },
                        new
                        {
                            Id = 4,
                            AcademicStatus = "Доцент",
                            FirstName = "Віталій",
                            LastName = "Горлач"
                        },
                        new
                        {
                            Id = 5,
                            AcademicStatus = "Асистент",
                            FirstName = "Любомир",
                            LastName = "Галамага"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("UserRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserRef")
                        .IsUnique();

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 3, 20, 10, 53, 37, 855, DateTimeKind.Local).AddTicks(4391),
                            IsApproved = true,
                            UserRef = "admin@email.com"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserRef")
                        .IsUnique()
                        .HasFilter("[UserRef] IS NOT NULL");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Володимир",
                            Group = "ПМІ-32",
                            LastName = "Мільчановський"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Марта",
                            Group = "ПМІ-32",
                            LastName = "Шуяк"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Оксана",
                            Group = "ПМІ-32",
                            LastName = "Пилипович"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Доскач",
                            Group = "ПМІ-31",
                            LastName = "Денис"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Левкович",
                            Group = "ПМІ-33",
                            LastName = "Роман"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.Property<int>("SubjectRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef");

                    b.HasIndex("SubjectRef");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("SST.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LectorRef")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LectorRef");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SST.Domain.Entities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "admin@email.com",
                            IsAdmin = true,
                            PasswordHash = "Yh+CEuxWzPTw0y2M9zgFEw1stxAwoa1mvyaoI2157nY="
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Grade", b =>
                {
                    b.HasOne("SST.Domain.Entities.StudentSubject", "StudentSubject")
                        .WithMany("Grades")
                        .HasForeignKey("StudentSubjectRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.Lector", b =>
                {
                    b.HasOne("SST.Domain.Entities.User", "User")
                        .WithOne("Lector")
                        .HasForeignKey("SST.Domain.Entities.Lector", "UserRef")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SST.Domain.Entities.Request", b =>
                {
                    b.HasOne("SST.Domain.Entities.User", "User")
                        .WithOne("Request")
                        .HasForeignKey("SST.Domain.Entities.Request", "UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.Student", b =>
                {
                    b.HasOne("SST.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SST.Domain.Entities.Student", "UserRef")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SST.Domain.Entities.StudentSubject", b =>
                {
                    b.HasOne("SST.Domain.Entities.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SST.Domain.Entities.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.Subject", b =>
                {
                    b.HasOne("SST.Domain.Entities.Lector", "Lector")
                        .WithMany("Subjects")
                        .HasForeignKey("LectorRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
